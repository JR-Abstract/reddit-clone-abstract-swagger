openapi: 3.0.1
info:
  title: Reddit Clone API
  description: API for Reddit Clone Application
  license:
    name: Apache License Version 2.0
    url: http://programmingtechie.com
  version: v1
externalDocs:
  description: Expense Tracker Wiki Documentation
  url: https://expensetracker.wiki/docs
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /api/v1/votes:
    post:
      tags:
        - vote-controller
      operationId: vote
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteDto'
        required: true
      responses:
        '200':
          description: OK
      x-swagger-router-controller: VoteController
  /api/v1/subreddit:
    get:
      tags:
        - subreddit-controller
      operationId: getAllSubreddits
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubredditDto'
                x-content-type: '*/*'
      x-swagger-router-controller: SubredditController
    post:
      tags:
        - subreddit-controller
      operationId: createSubreddit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubredditDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SubredditDto'
      x-swagger-router-controller: SubredditController
  /api/v1/posts:
    get:
      tags:
        - post-controller
      operationId: getAllPosts_1
      parameters:
        - name: subredditId
          in: query
          required: true
          style: form
          explode: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostResponse'
                x-content-type: '*/*'
      x-swagger-router-controller: PostController
    post:
      tags:
        - post-controller
      operationId: createPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
        required: true
      responses:
        '200':
          description: OK
      x-swagger-router-controller: PostController
  /api/v1/comments:
    post:
      tags:
        - comments-controller
      operationId: createComment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentsDto'
        required: true
      responses:
        '200':
          description: OK
      x-swagger-router-controller: CommentsController
  /api/v1/auth/signup:
    post:
      tags:
        - auth-controller
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
      x-swagger-router-controller: AuthController
  /api/v1/auth/refresh/token:
    post:
      tags:
        - auth-controller
      operationId: refreshTokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
      x-swagger-router-controller: AuthController
  /api/v1/auth/logout:
    post:
      tags:
        - auth-controller
      operationId: logout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
      x-swagger-router-controller: AuthController
  /api/v1/auth/login:
    post:
      tags:
        - auth-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
      x-swagger-router-controller: AuthController
  /api/v1/subreddit/{id}:
    get:
      tags:
        - subreddit-controller
      operationId: getSubreddit
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SubredditDto'
      x-swagger-router-controller: SubredditController
  /api/v1/posts/{id}:
    get:
      tags:
        - post-controller
      operationId: getPost
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PostResponse'
      x-swagger-router-controller: PostController
  /api/v1/posts/by-user/{username}:
    get:
      tags:
        - post-controller
      operationId: getPostsByUsername
      parameters:
        - name: username
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostResponse'
                x-content-type: '*/*'
      x-swagger-router-controller: PostController
  /api/v1/comments/by-user/{userName}:
    get:
      tags:
        - comments-controller
      operationId: getAllCommentsForUser
      parameters:
        - name: userName
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentsDto'
                x-content-type: '*/*'
      x-swagger-router-controller: CommentsController
  /api/v1/comments/by-post/{postId}:
    get:
      tags:
        - comments-controller
      operationId: getAllCommentsForPost
      parameters:
        - name: postId
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentsDto'
                x-content-type: '*/*'
      x-swagger-router-controller: CommentsController
  /api/v1/auth/accountVerification/{token}:
    get:
      tags:
        - auth-controller
      operationId: verifyAccount
      parameters:
        - name: token
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
      x-swagger-router-controller: AuthController
components:
  schemas:
    VoteDto:
      type: object
      properties:
        voteType:
          type: string
          enum:
            - UPVOTE
            - DOWNVOTE
        postId:
          type: integer
          format: int64
    SubredditDto:
      required:
        - description
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        numberOfPosts:
          type: integer
          format: int32
      example:
        numberOfPosts: 6
        name: name
        description: description
        id: 0
    PostRequest:
      required:
        - postName
      type: object
      properties:
        postId:
          type: integer
          format: int64
        subredditName:
          type: string
        postName:
          type: string
        url:
          type: string
        description:
          type: string
    CommentsDto:
      required:
        - text
      type: object
      properties:
        id:
          type: integer
          format: int64
        postId:
          type: integer
          format: int64
        createdDate:
          type: string
          format: date-time
        text:
          type: string
        userName:
          type: string
      example:
        createdDate: '2000-01-23T04:56:07.000Z'
        id: 0
        postId: 6
        text: text
        userName: userName
    RegisterRequest:
      required:
        - email
        - password
        - username
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string
    RefreshTokenRequest:
      required:
        - refreshToken
      type: object
      properties:
        refreshToken:
          type: string
        username:
          type: string
    AuthenticationResponse:
      type: object
      properties:
        authenticationToken:
          type: string
        refreshToken:
          type: string
        expiresAt:
          type: string
          format: date-time
        username:
          type: string
      example:
        expiresAt: '2000-01-23T04:56:07.000Z'
        authenticationToken: authenticationToken
        refreshToken: refreshToken
        username: username
    LoginRequest:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    PostResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        postName:
          type: string
        url:
          type: string
        description:
          type: string
        userName:
          type: string
        subredditName:
          type: string
        voteCount:
          type: integer
          format: int32
        commentCount:
          type: integer
          format: int32
        duration:
          type: string
        upVote:
          type: boolean
        downVote:
          type: boolean
      example:
        duration: duration
        postName: postName
        description: description
        id: 0
        voteCount: 6
        userName: userName
        downVote: true
        url: url
        subredditName: subredditName
        commentCount: 1
        upVote: true
